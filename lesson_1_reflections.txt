How did viewing a diff between two versions of a file help you see the bug that was introduced?
Viewing the diff allowed me to avoid going over each line of code in the two versions and comparing them. Instead, I could focus on the differences in the code in the two files.

How could having easy access to the entire history of a file make you a more efficient programmer in the long term?
Having an older version of file can help me go back and forth between code that works and code that doesn't. I can easily undo changes in the new version that might have broken my code. Moreover, I can compare a new functional version and an old functional version to decide which works better and faster. There are more applications. 

What do you think are the pros and cons of manually choosing when to create a commit, like you do in Git, vs having versions automatically saved, like Google Docs does?
The pros include a complete control over what is saved and what isn't. By manually committing, I can decide which changes are worth saving and which can be discarded. Moreover, I get to decide the size of the commit. The significance of a change for the entire project as a whole will be based on my perception of the changes that I have made, and not on the perception of a software designed to look for changes periodically and save them on its own. 
Cons are that there is more work involved, and there is a chance of losing work if I forget (because I am only human) to commit significant changes.

Why do you think some version control systems, like Git, allow saving multiple files in one commit, while others, like Google Docs, treat each file separately?
Git assumes that it is likely that a particular set of files in a repository are inter-connected and the user will prefer that these files are tracked together. As in the examples shown in the video, an HTML file and its CSS file are closely related. It doesn't make sense to have their changes tracked separately. At any given time, the user has access to all the files, changed or unchanged. He can essentially choose to view each file separately or look at them together.

How can you use the commands git log and git diff to view the history of files?
Using git log, we can find the commit ID of a commit with a particular commit message, and the commit ID of a commit made before this one. Then, using git diff and these two commit ID's, I can figure out the insertions and deletions in the made between these two.

How might using version control make you more confident to make changes that could break something?
As we saw now, git checkout will allow us to go to a previously working version very easily and inspect that. We can then look through the commits and see exactly which commit broke something. Then, using git diff between the working commit and the commit which broke the code, we can look at the changes that were made, and figure out which insertion, deletion broke the code. Thus, we can change that. Take risks more confidently!

Now that you have your workspace set up, what do you want to try using Git for?
I want to use Git to keep track of the changes I make in my code and take bolder steps towards changes in the code!


/*
Commands learnt:

git log - shows all recent commits (use argument --stat for compact version) 
git diff - shows difference between two things based on <no argument -->  working directory, staging area; --staged --> staging area, latest commit; two commit ID --> between commits>
git checkout - takes the files to a particular commit state/changes branch
git clone - creates a clone of an existing git repository and also copies its entire history of changes
*/